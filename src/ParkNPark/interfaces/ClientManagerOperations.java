package ParkNPark.interfaces;


/**
* ParkNPark/interfaces/ClientManagerOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from server.idl
* Friday, May 5, 2006 10:19:36 PM EDT
*/


/**
         * The interface that a single client uses to communicate with its server-side
         * client manager instance
         */
public interface ClientManagerOperations 
{

  /**
               * Returns the client's ID, which can be used in the client manager factory's
               * getExistingClientManager() method
               * @return The client's ID
               * @throws ServiceUnavailableException Thrown when the log is closed and the
               * server is shutting down
               */
  ParkNPark.interfaces.PaddedInteger getClientID () throws ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Moves the client's car into the lot with the given lot number and returns an array of level
               * numbers that have available spaces
               * @param seq The latest sequence number of the client
               * @param lot The lot number to enter
               * @throws AlreadyInLotException Thrown when the client's car is already in a lot
               * @throws LotNotFoundException Thrown if the given lot number is not known to the system
               * @throws LotFullException Thrown if the given lot is full
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the car from entering the lot
               * @return An array of level numbers that have available spaces
               * [Category: Baseline; Requirements: 1, 2, and 3]
               */
  ParkNPark.interfaces.PaddedIntegerSeq enterLot (int seq, int lot) throws ParkNPark.interfaces.AlreadyInLotException, ParkNPark.interfaces.LotNotFoundException, ParkNPark.interfaces.LotFullException, ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Removes the client's car from the lot that it is currently in
               * @param seq The latest sequence number of the client
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws NotOnExitLevelException Thrown if the car is in a lot but is not on a permitted
               * exit level
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the car from exiting the lot
               * [Category: Baseline; Requirement: 7]
               */
  ParkNPark.interfaces.PaddedVoid exitLot (int seq) throws ParkNPark.interfaces.NotInLotException, ParkNPark.interfaces.NotOnExitLevelException, ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Returns an array of other lots that have availability, sorted by lot distance such that
               * closer lots are listed first
               * @param lot The lot to get lot distances from
               * @throws LotNotFoundException Thrown if the given lot number is not known to the system
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if
               * some other reason prevents the system from discovering the availability of other lots
               * @return An array of other lots that have availability
               * [Category: Baseline; Requirement: 4]
               */
  ParkNPark.interfaces.PaddedIntegerSeq getOtherLotAvailability (int lot) throws ParkNPark.interfaces.LotNotFoundException, ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Returns an array of valid lot numbers in the system, sorted by the lot number in ascending order
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the system from discovering the its defined lots
               * @return An array of valid lot numbers in the system
               * [Category: Baseline; Requirement: 12]
               */
  ParkNPark.interfaces.PaddedIntegerSeq getLots () throws ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Moves the car from its present level to the level above it
               * @param seq The latest sequence number of the client
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws AtTopLevelException Thrown if the car is already on the highest level
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the car from moving to the next highest level
               * @return The level number that the client's car is now on
               * [Category: Baseline; Requirement: 6]
               */
  ParkNPark.interfaces.PaddedInteger moveUpLevel (int seq) throws ParkNPark.interfaces.NotInLotException, ParkNPark.interfaces.AtTopLevelException, ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Moves the car from its present level to the level beneath it
               * @param seq The latest sequence number of the client
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws AtTopLevelException Thrown if the car is already on the lowest level
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some other reason prevents the car from moving to the lower level
               * @return The level number that the client's car is now on
               * [Category: Baseline; Requirement: 6]
               */
  ParkNPark.interfaces.PaddedInteger moveDownLevel (int seq) throws ParkNPark.interfaces.NotInLotException, ParkNPark.interfaces.AtBottomLevelException, ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Returns the car's current level number
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the system from returning the car's current level
               * @return The car's current level number
               * [Category: Baseline; Requirement: 6]
               */
  ParkNPark.interfaces.PaddedInteger getCurrentLevel () throws ParkNPark.interfaces.NotInLotException, ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Returns the top level number of the car's current parking lot
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the system from returning the current lot's highest level
               * @return The top level number of the car's current parking lot
               * [Category: Baseline; Requirement: 6]
               */
  ParkNPark.interfaces.PaddedInteger getMaxLevel () throws ParkNPark.interfaces.NotInLotException, ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Returns the bottom level number of the car's current parking lot
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the system from returning the current lot's lowest level
               * @return The bottom level number of the car's current parking lot
               * [Category: Baseline; Requirement: 6]
               */
  ParkNPark.interfaces.PaddedInteger getMinLevel () throws ParkNPark.interfaces.NotInLotException, ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Closes the client manager and frees server resources associated with it, including the client
               * manager's activation in the server's CORBA portable object adapter
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the system from closing the client manager. The client manager remains
               * open if this exception gets thrown
               */
  void closeClientManager () throws ParkNPark.interfaces.ServiceUnavailableException;
} // interface ClientManagerOperations

package ParkNPark.interfaces;


/**
* ParkNPark/interfaces/ClientManagerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from server.idl
* Friday, May 5, 2006 10:19:36 PM EDT
*/


/**
         * The interface that a single client uses to communicate with its server-side
         * client manager instance
         */
public abstract class ClientManagerPOA extends org.omg.PortableServer.Servant
 implements ParkNPark.interfaces.ClientManagerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getClientID", new java.lang.Integer (0));
    _methods.put ("enterLot", new java.lang.Integer (1));
    _methods.put ("exitLot", new java.lang.Integer (2));
    _methods.put ("getOtherLotAvailability", new java.lang.Integer (3));
    _methods.put ("getLots", new java.lang.Integer (4));
    _methods.put ("moveUpLevel", new java.lang.Integer (5));
    _methods.put ("moveDownLevel", new java.lang.Integer (6));
    _methods.put ("getCurrentLevel", new java.lang.Integer (7));
    _methods.put ("getMaxLevel", new java.lang.Integer (8));
    _methods.put ("getMinLevel", new java.lang.Integer (9));
    _methods.put ("closeClientManager", new java.lang.Integer (10));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
               * Returns the client's ID, which can be used in the client manager factory's
               * getExistingClientManager() method
               * @return The client's ID
               * @throws ServiceUnavailableException Thrown when the log is closed and the
               * server is shutting down
               */
       case 0:  // ParkNPark/interfaces/ClientManager/getClientID
       {
         try {
           ParkNPark.interfaces.PaddedInteger $result = null;
           $result = this.getClientID ();
           out = $rh.createReply();
           ParkNPark.interfaces.PaddedIntegerHelper.write (out, $result);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Moves the client's car into the lot with the given lot number and returns an array of level
               * numbers that have available spaces
               * @param seq The latest sequence number of the client
               * @param lot The lot number to enter
               * @throws AlreadyInLotException Thrown when the client's car is already in a lot
               * @throws LotNotFoundException Thrown if the given lot number is not known to the system
               * @throws LotFullException Thrown if the given lot is full
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the car from entering the lot
               * @return An array of level numbers that have available spaces
               * [Category: Baseline; Requirements: 1, 2, and 3]
               */
       case 1:  // ParkNPark/interfaces/ClientManager/enterLot
       {
         try {
           int seq = in.read_long ();
           int lot = in.read_long ();
           ParkNPark.interfaces.PaddedIntegerSeq $result = null;
           $result = this.enterLot (seq, lot);
           out = $rh.createReply();
           ParkNPark.interfaces.PaddedIntegerSeqHelper.write (out, $result);
         } catch (ParkNPark.interfaces.AlreadyInLotException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.AlreadyInLotExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.LotNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.LotNotFoundExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.LotFullException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.LotFullExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Removes the client's car from the lot that it is currently in
               * @param seq The latest sequence number of the client
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws NotOnExitLevelException Thrown if the car is in a lot but is not on a permitted
               * exit level
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the car from exiting the lot
               * [Category: Baseline; Requirement: 7]
               */
       case 2:  // ParkNPark/interfaces/ClientManager/exitLot
       {
         try {
           int seq = in.read_long ();
           ParkNPark.interfaces.PaddedVoid $result = null;
           $result = this.exitLot (seq);
           out = $rh.createReply();
           ParkNPark.interfaces.PaddedVoidHelper.write (out, $result);
         } catch (ParkNPark.interfaces.NotInLotException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.NotInLotExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.NotOnExitLevelException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.NotOnExitLevelExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Returns an array of other lots that have availability, sorted by lot distance such that
               * closer lots are listed first
               * @param lot The lot to get lot distances from
               * @throws LotNotFoundException Thrown if the given lot number is not known to the system
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if
               * some other reason prevents the system from discovering the availability of other lots
               * @return An array of other lots that have availability
               * [Category: Baseline; Requirement: 4]
               */
       case 3:  // ParkNPark/interfaces/ClientManager/getOtherLotAvailability
       {
         try {
           int lot = in.read_long ();
           ParkNPark.interfaces.PaddedIntegerSeq $result = null;
           $result = this.getOtherLotAvailability (lot);
           out = $rh.createReply();
           ParkNPark.interfaces.PaddedIntegerSeqHelper.write (out, $result);
         } catch (ParkNPark.interfaces.LotNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.LotNotFoundExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Returns an array of valid lot numbers in the system, sorted by the lot number in ascending order
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the system from discovering the its defined lots
               * @return An array of valid lot numbers in the system
               * [Category: Baseline; Requirement: 12]
               */
       case 4:  // ParkNPark/interfaces/ClientManager/getLots
       {
         try {
           ParkNPark.interfaces.PaddedIntegerSeq $result = null;
           $result = this.getLots ();
           out = $rh.createReply();
           ParkNPark.interfaces.PaddedIntegerSeqHelper.write (out, $result);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Moves the car from its present level to the level above it
               * @param seq The latest sequence number of the client
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws AtTopLevelException Thrown if the car is already on the highest level
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the car from moving to the next highest level
               * @return The level number that the client's car is now on
               * [Category: Baseline; Requirement: 6]
               */
       case 5:  // ParkNPark/interfaces/ClientManager/moveUpLevel
       {
         try {
           int seq = in.read_long ();
           ParkNPark.interfaces.PaddedInteger $result = null;
           $result = this.moveUpLevel (seq);
           out = $rh.createReply();
           ParkNPark.interfaces.PaddedIntegerHelper.write (out, $result);
         } catch (ParkNPark.interfaces.NotInLotException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.NotInLotExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.AtTopLevelException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.AtTopLevelExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Moves the car from its present level to the level beneath it
               * @param seq The latest sequence number of the client
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws AtTopLevelException Thrown if the car is already on the lowest level
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some other reason prevents the car from moving to the lower level
               * @return The level number that the client's car is now on
               * [Category: Baseline; Requirement: 6]
               */
       case 6:  // ParkNPark/interfaces/ClientManager/moveDownLevel
       {
         try {
           int seq = in.read_long ();
           ParkNPark.interfaces.PaddedInteger $result = null;
           $result = this.moveDownLevel (seq);
           out = $rh.createReply();
           ParkNPark.interfaces.PaddedIntegerHelper.write (out, $result);
         } catch (ParkNPark.interfaces.NotInLotException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.NotInLotExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.AtBottomLevelException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.AtBottomLevelExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Returns the car's current level number
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the system from returning the car's current level
               * @return The car's current level number
               * [Category: Baseline; Requirement: 6]
               */
       case 7:  // ParkNPark/interfaces/ClientManager/getCurrentLevel
       {
         try {
           ParkNPark.interfaces.PaddedInteger $result = null;
           $result = this.getCurrentLevel ();
           out = $rh.createReply();
           ParkNPark.interfaces.PaddedIntegerHelper.write (out, $result);
         } catch (ParkNPark.interfaces.NotInLotException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.NotInLotExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Returns the top level number of the car's current parking lot
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the system from returning the current lot's highest level
               * @return The top level number of the car's current parking lot
               * [Category: Baseline; Requirement: 6]
               */
       case 8:  // ParkNPark/interfaces/ClientManager/getMaxLevel
       {
         try {
           ParkNPark.interfaces.PaddedInteger $result = null;
           $result = this.getMaxLevel ();
           out = $rh.createReply();
           ParkNPark.interfaces.PaddedIntegerHelper.write (out, $result);
         } catch (ParkNPark.interfaces.NotInLotException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.NotInLotExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Returns the bottom level number of the car's current parking lot
               * @throws NotInLotException Thrown if the car is not in a lot
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the system from returning the current lot's lowest level
               * @return The bottom level number of the car's current parking lot
               * [Category: Baseline; Requirement: 6]
               */
       case 9:  // ParkNPark/interfaces/ClientManager/getMinLevel
       {
         try {
           ParkNPark.interfaces.PaddedInteger $result = null;
           $result = this.getMinLevel ();
           out = $rh.createReply();
           ParkNPark.interfaces.PaddedIntegerHelper.write (out, $result);
         } catch (ParkNPark.interfaces.NotInLotException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.NotInLotExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Closes the client manager and frees server resources associated with it, including the client
               * manager's activation in the server's CORBA portable object adapter
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if some
               * other reason prevents the system from closing the client manager. The client manager remains
               * open if this exception gets thrown
               */
       case 10:  // ParkNPark/interfaces/ClientManager/closeClientManager
       {
         try {
           this.closeClientManager ();
           out = $rh.createReply();
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ParkNPark/interfaces/ClientManager:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ClientManager _this() 
  {
    return ClientManagerHelper.narrow(
    super._this_object());
  }

  public ClientManager _this(org.omg.CORBA.ORB orb) 
  {
    return ClientManagerHelper.narrow(
    super._this_object(orb));
  }


} // class ClientManagerPOA

package ParkNPark.interfaces;


/**
* ParkNPark/interfaces/ClientManagerFactoryOperations.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from server.idl
* Friday, May 5, 2006 10:19:36 PM EDT
*/


/**
         * The main interface that the client uses to communicate with the server
         */
public interface ClientManagerFactoryOperations 
{

  /**
               * Creates a new client manager instance for a new client
               * @param hostname The host name of the client
               * @throws ServiceUnavailableException Thrown if the database cannot be
               * contacted or if some other reason prevents the client manager from
               * being created successfully
               * @return A new client manager instance for a new client
               * [Category: Dependability; Requirement: 2
               */
  ParkNPark.interfaces.ClientManager getClientManager (String hostname) throws ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Returns the existing client manager instance for an existing client. A client can call
               * this method with its client ID and last sequence number on any server and should get its
               * client manager instance
               * @param clientID The ID of the client to get the ClientManager of
               * @param hostname The host name of the client
               * @throws InvalidClientException Thrown when the given client ID is not known to the system
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if
               * some other reason prevents the client manager from being retrieved successfully
               * @return The existing client manager instance for an existing client
               * [Category: Dependability; Requirement: 2]
               */
  ParkNPark.interfaces.ClientManager getExistingClientManager (int clientID, String hostname) throws ParkNPark.interfaces.ServiceUnavailableException, ParkNPark.interfaces.InvalidClientException;

  /**
               * Pokes the server to see if it is still alive and that it can still
               * communicate with the database
               * @throws ServiceUnavailableException Thrown when the server's database
               * connection is not working
               * [Category: Dependability; Requirement: 1]
               */
  void poke () throws ParkNPark.interfaces.ServiceUnavailableException;

  /**
               * Causes the server's database connection to become "hosed," meaning
               * that it will fail to work after this method is called. This is used
               * primarily for fault injection
               * [TO TEST ROBUSTNESS]
               */
  void hoseDatabaseConnection ();

  /**
               * Kills the server
               * [TO TEST FAILURES]
               */
  void killServer ();

  /**
               * Exits the server gracefully
               * [TO TERMINATE THE SERVICE]
               */
  void exitServer ();

  /**
               * Flushes the server's log files
               * [FOR EXPERIMENTS]
               */
  void flushLogs ();
} // interface ClientManagerFactoryOperations

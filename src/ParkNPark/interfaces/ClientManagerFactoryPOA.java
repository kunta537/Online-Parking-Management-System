package ParkNPark.interfaces;


/**
* ParkNPark/interfaces/ClientManagerFactoryPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from server.idl
* Friday, May 5, 2006 10:19:36 PM EDT
*/


/**
         * The main interface that the client uses to communicate with the server
         */
public abstract class ClientManagerFactoryPOA extends org.omg.PortableServer.Servant
 implements ParkNPark.interfaces.ClientManagerFactoryOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getClientManager", new java.lang.Integer (0));
    _methods.put ("getExistingClientManager", new java.lang.Integer (1));
    _methods.put ("poke", new java.lang.Integer (2));
    _methods.put ("hoseDatabaseConnection", new java.lang.Integer (3));
    _methods.put ("killServer", new java.lang.Integer (4));
    _methods.put ("exitServer", new java.lang.Integer (5));
    _methods.put ("flushLogs", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
               * Creates a new client manager instance for a new client
               * @param hostname The host name of the client
               * @throws ServiceUnavailableException Thrown if the database cannot be
               * contacted or if some other reason prevents the client manager from
               * being created successfully
               * @return A new client manager instance for a new client
               * [Category: Dependability; Requirement: 2
               */
       case 0:  // ParkNPark/interfaces/ClientManagerFactory/getClientManager
       {
         try {
           String hostname = in.read_string ();
           ParkNPark.interfaces.ClientManager $result = null;
           $result = this.getClientManager (hostname);
           out = $rh.createReply();
           ParkNPark.interfaces.ClientManagerHelper.write (out, $result);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Returns the existing client manager instance for an existing client. A client can call
               * this method with its client ID and last sequence number on any server and should get its
               * client manager instance
               * @param clientID The ID of the client to get the ClientManager of
               * @param hostname The host name of the client
               * @throws InvalidClientException Thrown when the given client ID is not known to the system
               * @throws ServiceUnavailableException Thrown if the database cannot be contacted or if
               * some other reason prevents the client manager from being retrieved successfully
               * @return The existing client manager instance for an existing client
               * [Category: Dependability; Requirement: 2]
               */
       case 1:  // ParkNPark/interfaces/ClientManagerFactory/getExistingClientManager
       {
         try {
           int clientID = in.read_long ();
           String hostname = in.read_string ();
           ParkNPark.interfaces.ClientManager $result = null;
           $result = this.getExistingClientManager (clientID, hostname);
           out = $rh.createReply();
           ParkNPark.interfaces.ClientManagerHelper.write (out, $result);
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         } catch (ParkNPark.interfaces.InvalidClientException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.InvalidClientExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Pokes the server to see if it is still alive and that it can still
               * communicate with the database
               * @throws ServiceUnavailableException Thrown when the server's database
               * connection is not working
               * [Category: Dependability; Requirement: 1]
               */
       case 2:  // ParkNPark/interfaces/ClientManagerFactory/poke
       {
         try {
           this.poke ();
           out = $rh.createReply();
         } catch (ParkNPark.interfaces.ServiceUnavailableException $ex) {
           out = $rh.createExceptionReply ();
           ParkNPark.interfaces.ServiceUnavailableExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**
               * Causes the server's database connection to become "hosed," meaning
               * that it will fail to work after this method is called. This is used
               * primarily for fault injection
               * [TO TEST ROBUSTNESS]
               */
       case 3:  // ParkNPark/interfaces/ClientManagerFactory/hoseDatabaseConnection
       {
         this.hoseDatabaseConnection ();
         out = $rh.createReply();
         break;
       }


  /**
               * Kills the server
               * [TO TEST FAILURES]
               */
       case 4:  // ParkNPark/interfaces/ClientManagerFactory/killServer
       {
         this.killServer ();
         out = $rh.createReply();
         break;
       }


  /**
               * Exits the server gracefully
               * [TO TERMINATE THE SERVICE]
               */
       case 5:  // ParkNPark/interfaces/ClientManagerFactory/exitServer
       {
         this.exitServer ();
         out = $rh.createReply();
         break;
       }


  /**
               * Flushes the server's log files
               * [FOR EXPERIMENTS]
               */
       case 6:  // ParkNPark/interfaces/ClientManagerFactory/flushLogs
       {
         this.flushLogs ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ParkNPark/interfaces/ClientManagerFactory:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ClientManagerFactory _this() 
  {
    return ClientManagerFactoryHelper.narrow(
    super._this_object());
  }

  public ClientManagerFactory _this(org.omg.CORBA.ORB orb) 
  {
    return ClientManagerFactoryHelper.narrow(
    super._this_object(orb));
  }


} // class ClientManagerFactoryPOA
